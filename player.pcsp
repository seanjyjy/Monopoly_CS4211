handleBuy(piece, buyProb, dontBuyProb) = pcase {
	buyProb: buyProperty.piece {
		var piecePos = position[piece][idx];
		board[piecePos][idx] = piece;
		position[piece][money] = position[piece][money] - board[piecePos][cost];
	} -> Game
	dontBuyProb: Game
};

decideBuy(piece) = [board[position[piece][idx]][cost] > position[piece][money]] Game
				   []
				   [piece == p1] handleBuy(piece, 1, 0)
				   []
				   [piece == p2] handleBuy(piece, 1, 0);
					

payRent(piece) = rentPay.piece {
	var rental = board[position[piece][idx]][rent];
	var ownerPosition = board[position[piece][idx]][owner];
	position[piece][money] = position[piece][money] - rental;
	position[ownerPosition][money] = position[ownerPosition][money] + rental;
} -> boardChecker(piece);

decidePayRent(piece) = [board[position[piece][idx]][owner] == piece] Game
                      [] [board[position[piece][idx]][owner] != piece] payRent(piece)
