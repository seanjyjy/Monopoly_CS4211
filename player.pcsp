#define maxGreedyBuy 1;
#define maxGreedyDontBuy 0;

#define greedyBuy 3;
#define greedyDontBuy 1;

#define neutralBuy 1;
#define neutralDontBuy 1;

#define maxNotGreedyBuy 0;
#define maxNotGreedyDontBuy 1;

handleBuy(player, buyProb, dontBuyProb) = pcase {
	buyProb: buyProperty.player {
    	var currProperty = position[player];
		properties[currProperty][owner] = player;
		money[player] = money[player] - properties[currProperty][cost];
	} -> Game
	dontBuyProb: dontBuyProperty.player -> Game
};

decideBuy(player) = [properties[position[player]][cost] > money[player]] noMoneyBuy.player -> Game
				   []
				   [player == p1] handleBuy(player, greedyBuy, greedyDontBuy)
				   []
				   [player == p2] handleBuy(player, maxGreedyBuy, maxGreedyDontBuy);
				  

handlePayRent(player) = payRent.properties[position[player]][rent] {
 	var currProperty = position[player];
	var rental = properties[currProperty][rent];
	var currOwner = properties[currProperty][owner];
	money[player] = money[player] - rental;
	money[currOwner] = money[currOwner] + rental;
} -> boardChecker(player);

decidePayRent(player) = [properties[position[player]][owner] == player] noNeedPayRentToOwnself.player -> Game
                       [] 
                       [properties[position[player]][owner] != player] handlePayRent(player);
