#include "constant.csp";
#include "board.csp";

roll(i) = pcase {
	1: {dice=1} -> move(i, dice)
	1: {dice=2} -> move(i, dice)
	1: {dice=3} -> move(i, dice)
	1: {dice=4} -> move(i, dice)
	1: {dice=5} -> move(i, dice)
	1: {dice=6} -> move(i, dice)
};

move(piece, dist) = m.piece { 
	position[piece][0] = (position[piece][0] + dist);
	if (position[piece][0] >= boardSize) {
		position[piece][1] = position[piece][1] + pass_go;
	}
	position[piece][0] = position[piece][0] % boardSize;
	round = round + 1; 
 } -> 
 (
 [board[position[piece][0]][0] == no_owner] decideBuy(piece)
 []
 [board[position[piece][0]][0] != no_owner && board[position[piece][0]][0] != piece] payRent(piece)
 []
 roll((piece + 1) % 2)
 );
 
 handleP1Buy(piece) = pcase {
	4: {board[position[piece][0]][0] = piece} ->  roll((piece + 1) % 2)
	1:  roll((piece + 1) % 2)
};

handleP2Buy(piece) = pcase {
	1: {board[position[piece][0]][0] = piece} ->  roll((piece + 1) % 2)
	1:  roll((piece + 1) % 2)
};

decideBuy(piece) = [piece == p1] handleP1Buy(piece)
				   []
				   [piece == p2] handleP2Buy(piece);

payRent(piece) = rentPay.piece {
	position[piece][1] = position[piece][1] - board[position[piece][0]][2];
	// position[board[position[piece][0]][0]][1] = position[board[position[piece][0]][0]][1] + board[position[piece][0]][2];
	position[(piece + 1) % 2][1] = position[(piece + 1) % 2][1] + board[position[piece][0]][2];
} -> roll((piece + 1) % 2);


Game = roll(0);

#define test (position[p1][0] == 9);
#assert Game reaches test;