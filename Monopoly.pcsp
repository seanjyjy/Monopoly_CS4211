#include "constant.csp";
#include "player.pcsp";
#include "move.pcsp";
#import "Utils";

// comment out the desired board to try its configuration
#include "boardControl.csp";
// #include "boardMonopoly.csp";

// #include "board1.csp";
// #include "board2.csp";
// #include "board3.csp";

/*
Note each round denotes a player action, rather than a set of complete player actions
Round 5: P1 -> P2 -> P1 -> P2 -> P1
*/

// initial game states
var startPlayer = 0;
var roundsToPlay = 8;

var p1GreedinessBuy = generousBuy;
var p1GreedinessDontBuy = generousDontBuy;
var p2GreedinessBuy = gluttonBuy;
var p2GreedinessDontBuy = gluttonDontBuy;



Game = [round < roundsToPlay] roundNo.round -> roll(startPlayer % 2) 
	   []
	   [round >= roundsToPlay] gameEnd.round -> Skip; // Exit simulation to prevent deadlock

boardChecker(player) = [money[player] >= 0] Game
				       []
					   [money[player] < 0] bankruptGameEnd.player { round = roundsToPlay } -> Skip;

#define gameEndConditionBoundedRoundP1Win round == roundsToPlay && call(didFirstWinSecond, p1, p2, money, properties, propertyFieldCount, owner, cost);
#assert Game reaches gameEndConditionBoundedRoundP1Win;
#assert Game reaches gameEndConditionBoundedRoundP1Win with pmin;
#assert Game reaches gameEndConditionBoundedRoundP1Win with pmax;
#assert Game reaches gameEndConditionBoundedRoundP1Win with prob;

#define gameEndConditionBoundedRoundP2Win round == roundsToPlay && call(didFirstWinSecond, p2, p1, money, properties, propertyFieldCount, owner, cost);
#assert Game reaches gameEndConditionBoundedRoundP2Win;
#assert Game reaches gameEndConditionBoundedRoundP2Win with pmin;
#assert Game reaches gameEndConditionBoundedRoundP2Win with pmax;
#assert Game reaches gameEndConditionBoundedRoundP2Win with prob;

#assert Game deadlockfree;